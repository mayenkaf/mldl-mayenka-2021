# -*- coding: utf-8 -*-
"""Copia de 2. Introducción_a_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Shu8VLu5w3ogAOP5ydfbaurHH_R9nSGL

# Contenido

Estructuras de datos
- Lectura
- DataFrames
- Operaciones
"""

import pandas as pd

import dask as dd
#wrangler | awswrangler

#Instalación de nuevas librerías
!pip install <lib> #<- poner el nombre de la libreria que quieres instalar acá

df = pd.DataFrame(data={'col_1': [2, 3], 'col_2': [4, 5]})

df

df.to_parquet('df.parquet.gzip', compression='gzip')
pd.read_parquet('df.parquet.gzip')

"""**Cargar archivos en el CoLab**"""

from google.colab import files
uploaded = files.upload()

"""# LECTURA DE DATOS"""

import io
import numpy as np

df = pd.read_csv(io.BytesIO(uploaded['Data_Clientes.csv']))

df

"""## LIMPIEZA DE VARIABLES

### Calculo del total de NaNs
"""

# Calculo de % de NaNs por variable
(df['seg_un'].isna().sum())/(len(df['seg_un']))

df.flg_saltothip12m=df.flg_saltothip12m.fillna(0)
df.flg_saltotppe12m=df.flg_saltotppe12m.fillna(0)
df.prm_pctsaltototrent12m=df.prm_pctsaltototrent12m.fillna(0)
df.prm_pctsaltotcaja12m=df.prm_pctsaltotcaja12m.fillna(0)
df.ant_saltot24m=df.ant_saltot24m.fillna(0)
df.ant_saltot12m=df.ant_saltot12m.fillna(0)
df.min_difsaltottcr12m=df.min_difsaltottcr12m.fillna(0)
df.num_incrsaldispefe06m=df.num_incrsaldispefe06m.fillna(0)
df.max_difent12m=df.max_difent12m.fillna(0)
df.num_dismsalppecons06m=df.num_dismsalppecons06m.fillna(0)
df.beta_pctusotcr12m=df.beta_pctusotcr12m.fillna(0)
df.prm_pctusosaltottcr03m=df.prm_pctusosaltottcr03m.fillna(0)
df.dsv_saltotppe03m=df.dsv_saltotppe03m.fillna(0)
df.prm_diasatrrdpn12m=df.prm_diasatrrdpn12m.fillna(0)
df.dsv_numentrdlintcr03m=df.dsv_numentrdlintcr03m.fillna(0)
df.rat_disefepnm01=df.rat_disefepnm01.fillna(0)
df.prm_diasatrrdpn06m=df.prm_diasatrrdpn06m.fillna(0)
df.pct_usotcrm01=df.pct_usotcrm01.fillna(0)
df.dsv_numentrdlintcr06m=df.dsv_numentrdlintcr06m.fillna(0)
df.beta_saltotppe12m=df.beta_saltotppe12m.fillna(0)
df.prm_entrd03m=df.prm_entrd03m.fillna(0)
df.ctd_entrdm01=df.ctd_entrdm01.fillna(0)
df.beta_saltotppe06m=df.beta_saltotppe06m.fillna(0)
df.prm_diasatrrd03m=df.prm_diasatrrd03m.fillna(0)
df.prm_saltotrdpj03m=df.prm_saltotrdpj03m.fillna(0)
df.prm_saltotrdpj12m=df.prm_saltotrdpj12m.fillna(0)
df.dsv_diasatrrdpj12m=df.dsv_diasatrrdpj12m.fillna(0)
df.max_pctsalimpago12m=df.max_pctsalimpago12m.fillna(0)
df.prm_diasatrrdpj03m=df.prm_diasatrrdpj03m.fillna(0)
df.prm_diasatrrdpj03m=df.prm_diasatrrdpj03m.fillna(0)
df.seg_un = df.seg_un.fillna(0)

"""## IMPUTACION DE VARIABLES"""

# Imputacion por mediana
df.edad = df.edad.fillna(df.edad.median())

# Imputacion criterio experto!
df.ubigeo_buro = df.ubigeo_buro.fillna('Otros')
df.grp_riesgociiu = df.grp_riesgociiu.fillna('grupo_0')

df["seg_un"]  = pd.Series(np.where(df.seg_un.isin([0,3]),0,df.seg_un))
df["grp_riesgociiu"] = pd.Series(np.where(df.grp_riesgociiu.isin(['grupo_2','grupo_3','grupo_9','grupo_8','grupo_1']),'grupo_11',df.grp_riesgociiu))

df

# 18 - 30 = 'joven'         | df.joven 
# 31 - 45 = 'adulto'        | df.adulto
# 46 - inf = 'adulto mayor' | df.adulto_mayor

# df.xxx -> solo si la varible ya existe
# si estás creando df['xxx']

df['joven'] = pd.Series(np.where((df.edad > 18) & (df.edad < 30), True, False))
df['adulto'] = pd.Series(np.where((df.edad > 31) & (df.edad < 45), True, False))

df.joven

"""### CATEGORIAS -> NÚMERICAS"""

# MANUAL
df.grp_riesgociiu = pd.Series(np.where(df.grp_riesgociiu == 'LIMA MODERNA', 1, df.grp_riesgociiu))
df.grp_riesgociiu = pd.Series(np.where(df.grp_riesgociiu == 'REGION SUR', 2, df.grp_riesgociiu))

"""**SKLEARN ENCODING**"""

from sklearn.preprocessing import LabelEncoder

df['ubigeo_buro'].unique() #PERMITE VER CUANTOS ELEMENTOS UNICOS HAY

ds_clase = LabelEncoder()
ds_clase.fit(df['ubigeo_buro'])
df['ubigeo_buro'] = ds_clase.transform(df['ubigeo_buro'])

features_encoder = ['grp_camptottlv06m','grp_campecstlv06m','grp_camptot06m','grp_campecs06m','region','ubigeo_buro', 'grp_riesgociiu']
for columna in features_encoder:
  print(columna)
  ds_clase = LabelEncoder()
  ds_clase.fit(df[str(columna)])
  df[str(columna)] = ds_clase.transform(df[str(columna)])

"""# ASIGNACIÓN DE TIPO DE DATOS"""

df.monto=df.monto.astype( 'float64')
df.target=df.target.astype('int32')
df.ctd_prod_rccsf_m01=df.ctd_prod_rccsf_m01.astype( 'int32')
df.prom_salvig_entprinc_pp_rccsf_03m=df.prom_salvig_entprinc_pp_rccsf_03m.astype( 'float64')
df.max_usotcrrstsf06m=df.max_usotcrrstsf06m.astype( 'float64')
df.max_usotcrrstsf03m=df.max_usotcrrstsf03m.astype( 'float64')
df.prm_lintcribksf06m=df.prm_lintcribksf06m.astype( 'float64')
df.lin_tcribksf03m=df.lin_tcribksf03m.astype( 'float64')
df.lin_tcribksf06m=df.lin_tcribksf06m.astype( 'float64')
df.cre_salvig_pp_rccsf_m02=df.cre_salvig_pp_rccsf_m02.astype( 'float64')
df.prm_usotcrrstsf06m=df.prm_usotcrrstsf06m.astype( 'float64')
df.prm_lintcribksf03m=df.prm_lintcribksf03m.astype( 'float64')
df.prm_usotcrrstsf03m=df.prm_usotcrrstsf03m.astype( 'float64')
df.ratuso_tcrrstsf_m13=df.ratuso_tcrrstsf_m13.astype( 'float64')
df.promctdprodrccsf3m=df.promctdprodrccsf3m.astype( 'float64')
df.ratpct_saldopprcc_m13=df.ratpct_saldopprcc_m13.astype( 'float64')
df.promctdprodrccsf6m=df.promctdprodrccsf6m.astype( 'float64')
df.ctd_actrccsf_6m=df.ctd_actrccsf_6m.astype( 'int32')
df.ctd_flgact_rccsf_m01=df.ctd_flgact_rccsf_m01.astype( 'int32')
df.sld_ep1ppeallsfm01=df.sld_ep1ppeallsfm01.astype( 'float64')
df.prm_sldvigrstsf12m=df.prm_sldvigrstsf12m.astype( 'float64')
df.sldtot_tcrsrcf=df.sldtot_tcrsrcf.astype( 'float64')
df.sldvig_tcrsrcf=df.sldvig_tcrsrcf.astype( 'float64')
df.flg_lintcrripsaga=df.flg_lintcrripsaga.astype( 'int32')
df.flg_svtcrsrcf=df.flg_svtcrsrcf.astype( 'int32')
df.flg_sdtcrripsaga=df.flg_sdtcrripsaga.astype( 'int32')
df.flg_sttcrsrcf=df.flg_sttcrsrcf.astype( 'int32')
df.flg_svltcrsrcf=df.flg_svltcrsrcf.astype( 'int32')
df.max_camptottlv06m=df.max_camptottlv06m.astype( 'int32')
df.min_camptottlv06m=df.min_camptottlv06m.astype( 'int32')
df.frc_camptottlv06m=df.frc_camptottlv06m.astype( 'int32')
df.rec_camptottlv06m=df.rec_camptottlv06m.astype( 'int32')
df.grp_camptottlv06m=df.grp_camptottlv06m.astype( 'int32')
df.ctd_camptottlv06m=df.ctd_camptottlv06m.astype( 'int32')
df.prm_camptottlv06m=df.prm_camptottlv06m.astype( 'float64')
df.max_campecstlv06m=df.max_campecstlv06m.astype( 'int32')
df.min_campecstlv06m=df.min_campecstlv06m.astype( 'int32')
df.frc_campecstlv06m=df.frc_campecstlv06m.astype( 'int32')
df.rec_campecstlv06m=df.rec_campecstlv06m.astype( 'int32')
df.grp_campecstlv06m=df.grp_campecstlv06m.astype( 'int32')
df.ctd_campecstlv06m=df.ctd_campecstlv06m.astype( 'int32')
df.prm_campecstlv06m=df.prm_campecstlv06m.astype( 'float64')
df.max_camptot06m=df.max_camptot06m.astype( 'int32')
df.min_camptot06m=df.min_camptot06m.astype( 'int32')
df.frc_camptot06m=df.frc_camptot06m.astype( 'int32')
df.rec_camptot06m=df.rec_camptot06m.astype( 'int32')
df.grp_camptot06m=df.grp_camptot06m.astype( 'int32')
df.ctd_camptot06m=df.ctd_camptot06m.astype( 'int32')
df.prm_camptot06m=df.prm_camptot06m.astype( 'float64')
df.max_campecs06m=df.max_campecs06m.astype( 'int32')
df.min_campecs06m=df.min_campecs06m.astype( 'int32')
df.frc_campecs06m=df.frc_campecs06m.astype( 'int32')
df.rec_campecs06m=df.rec_campecs06m.astype( 'int32')
df.grp_campecs06m=df.grp_campecs06m.astype( 'int32')
df.ctd_campecs06m=df.ctd_campecs06m.astype( 'int32')
df.prm_campecs06m=df.prm_campecs06m.astype( 'float64')
# ... definir tipos de datos para cada variable